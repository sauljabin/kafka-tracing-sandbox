services:
  kafka1:
    image: confluentinc/cp-kafka:${VERSION}
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_JMX_PORT: "19999"
      CLUSTER_ID: "arN_n1N_QHqihZJPxv7URA"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
    ports:
      - "19092:19092"
      - "19999:19999"
    restart: on-failure
    volumes:
      - kafka1_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka2:
    image: confluentinc/cp-kafka:${VERSION}
    environment:
      KAFKA_BROKER_ID: "2"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_JMX_PORT: "29999"
      CLUSTER_ID: "arN_n1N_QHqihZJPxv7URA"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
    ports:
      - "29092:29092"
      - "29999:29999"
    restart: on-failure
    volumes:
      - kafka2_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka3:
    image: confluentinc/cp-kafka:${VERSION}
    environment:
      KAFKA_BROKER_ID: "3"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://localhost:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_JMX_PORT: "39999"
      CLUSTER_ID: "arN_n1N_QHqihZJPxv7URA"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093,3@kafka3:9093"
    ports:
      - "39092:39092"
      - "39999:39999"
    restart: on-failure
    volumes:
      - kafka3_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  akhq:
    image: tchiotludo/akhq:latest
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: kafka1:9092,kafka2:9092,kafka3:9092
              schema-registry:
                url: http://schema-registry:8081
    ports:
      - 8080:8080
    restart: on-failure
    depends_on:
      kafka1:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    healthcheck:
      test: curl -sSf http://localhost:28081/health > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  schema-registry:
    build:
      context: ./schema-registry
      args:
        VERSION: ${VERSION}
    environment:
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092,kafka3:9092
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: schema-registry.schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: '1'
      SCHEMA_REGISTRY_OPTS: -javaagent:/home/appuser/opentelemetry-javaagent.jar
      OTEL_SERVICE_NAME: schema-registry
      OTEL_EXPORTER_JAEGER_ENDPOINT: 'http://jaeger:14250'
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_METRICS_EXPORTER: none
      OTEL_JAVAAGENT_ENABLED: true
    ports:
      - 8081:8081
    restart: on-failure
    depends_on:
      kafka1:
        condition: service_healthy
    healthcheck:
      test: curl -sSf http://localhost:8081 > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
      - 14250:14250
    restart: on-failure
    healthcheck:
      test: wget -q --spider http://localhost:14269/ > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:

networks:
  default:
    external: true
    name: kafka-tracing-sandbox_network
