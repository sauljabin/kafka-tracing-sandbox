version: '3.9'

services:
  kafka:
    image: confluentinc/cp-kafka:7.1.1
    environment:
      TZ: America/Guayaquil
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_BROKER_ID: '1'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
    ports:
      - 9093:9093
    restart: on-failure
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition:
          service_healthy
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.1
    environment:
      TZ: America/Guayaquil
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_SERVER_ID: '1'
      ZOOKEEPER_SYNC_LIMIT: '2'
      ZOOKEEPER_TICK_TIME: '2000'
    ports:
      - 2181:2181
    restart: on-failure
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/log
    healthcheck:
      test: nc -z localhost 2181
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  akhq:
    image: tchiotludo/akhq:latest
    environment:
      TZ: America/Guayaquil
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka-cluster:
              properties:
                bootstrap.servers: kafka:9092
              schema-registry:
                url: http://schema-registry:8081
    ports:
      - 8080:8080
    restart: on-failure
    depends_on:
      kafka:
        condition:
          service_healthy
      schema-registry:
        condition:
          service_healthy
    healthcheck:
      test: curl -sSf http://localhost:28081/health > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  schema-registry:
    build: ./schema-registry
    environment:
      TZ: America/Guayaquil
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: schema-registry.schemas
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: '1'
      SCHEMA_REGISTRY_OPTS: -javaagent:/home/appuser/opentelemetry-javaagent.jar
      OTEL_SERVICE_NAME: schema-registry
      OTEL_EXPORTER_JAEGER_ENDPOINT: 'http://jaeger:14250'
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_METRICS_EXPORTER: none
      OTEL_JAVAAGENT_ENABLED: true
    ports:
      - 8081:8081
    restart: on-failure
    depends_on:
      kafka:
        condition:
          service_healthy
    healthcheck:
      test: curl -sSf http://localhost:8081 > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
      - 14250:14250
    restart: on-failure
    healthcheck:
      test: wget -q --spider http://localhost:14269/ > /dev/null 2>&1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

volumes:
  kafka_data:
  zookeeper_data:
  zookeeper_datalog:

networks:
  default:
    external: true
    name: kafka-opentelemetry-sandbox_network
